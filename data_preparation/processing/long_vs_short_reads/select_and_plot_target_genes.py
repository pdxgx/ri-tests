#!/usr/bin/env python3

"""
select_and_plot_target_genes.py
Python 3 code for choosing target genes

SAMPLE RUN:
 paper_results % time python
 ../../intronomer-paper/benchmarking_data/select_and_plot_target_genes.py -o .
 -x ../HX1_final/reads_per_gene_and_transcript_HX1.tsv
 -p ../iPSC_final/reads_per_gene_and_transcript_iPSC.tsv
 -X ../HX1_final/mpile-sstat_gencode-v35_SRR2911306-hx1.csv
 -P ../iPSC_final/mpile-sstat_gencode-v35_SRR6026510-ipsc.csv
"""
import argparse
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib import style
import os
import pandas as pd

_SR_MED_COV = 'short_read_gene_median_coverage'
_LR_TX_READS = 'reads_per_transcript'


def scatter_regression_and_size(scatter_df, yval, xval, figfile):
    x_axis_label='median short read coverage across gene'
    y_axis_label = 'maximum "best match" long reads\nper gene transcript'

    color_dict = {'HX1': '#d3494e', 'iPSC': '#448ee4'}
    groups = scatter_df.groupby([xval, yval, 'sample'])
    scatter_dict = {'x': [], 'y': [], 'count': [], 'color': []}
    for group_index, group in groups:
        scatter_dict['x'].append(group_index[0])
        scatter_dict['y'].append(group_index[1])
        scatter_dict['count'].append(6 * (len(group) ** (1.0 / 1.5)))
        scatter_dict['color'].append(color_dict[group_index[2]])
    scatter_df = pd.DataFrame(scatter_dict)

    plt.subplots()
    plt.rcParams.update({'figure.autolayout': True})
    plt.rcParams['figure.figsize'] = 5.0, 5.0
    style.use('seaborn-whitegrid')

    # location of these lines is slightly less than the actual cutoffs
    # (2 and 5) since these are inclusive thresholds; lines visually encompass
    # the included regions:
    plt.axvline(
        x=1.8, color='black', #label='short read coverage threshold',
        linewidth=0.75
    )
    plt.axhline(
        y=4.42, color='black', #label='long reads/transcript threshold',
        linewidth=0.75, label='coverage thresholds'
    )
    plt.legend(fontsize='small', frameon=True)
    plt.scatter(
        x='x', y='y', c='color', data=scatter_df, s='count',
        edgecolors='#d8dcd6', linewidths=0.05, label=None, alpha=0.6
    )
    plt.xlabel(x_axis_label)
    ax = plt.gca()
    ax.set_yscale('log')
    ax.set_xscale('log')
    plt.ylabel(y_axis_label)
    fig = plt.gcf()
    fig.savefig(figfile)
    plt.clf()
    return


def select_target_genes(sample_df, out_file):
    print(sample_df.columns.values.tolist())
    target_genes = sample_df.loc[
        (sample_df[_SR_MED_COV] >= 2) & (sample_df[_LR_TX_READS] >= 5)
    ]['gene_id'].unique()
    with open(out_file, 'w') as output:
        for gene in target_genes:
            output.write('{}\n'.format(gene))
    return


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Plots long and short read coverage per gene with cutoffs.'
    )
    parser.add_argument(
        '--output-directory', '-o',
        help='directory in which to store output files and figures; if no '
             'directory specified, this will be set as the same directory '
             'containing the range summarized results.'
    )
    parser.add_argument(
        '--HX1-LR-file', '-x',
        help='File "reads_per_gene_and_transcript_HX1.tsv" generated by '
             'pacbio_reads_to_transcripts.py'
    )
    parser.add_argument(
        '--HX1-SR-file', '-X',
        help='File "mpile-sstat_gencode-v35_SRR2911306-hx1.csv"'
    )
    parser.add_argument(
        '--iPSC-LR-file', '-p',
        help='File "reads_per_gene_and_transcript_iPSC.tsv" generated by '
             'pacbio_reads_to_transcripts.py'
    )
    parser.add_argument(
        '--iPSC-SR-file', '-P',
        help='File "mpile-sstat_gencode-v35_SRR6026510-ipsc.csv"'
    )

    args = parser.parse_args()
    output_dir = args.output_directory
    h_lr = args.HX1_LR_file
    i_lr = args.iPSC_LR_file
    h_sr = args.HX1_SR_file
    i_sr = args.iPSC_SR_file

    now = datetime.now().strftime('%m-%d-%Y_%H.%M.%S')
    h_l = pd.read_table(h_lr, sep='\t', usecols=['gene_id', _LR_TX_READS])
    h_lvals = h_l.groupby('gene_id')[_LR_TX_READS].max().reset_index()
    h_s = pd.read_table(h_sr, sep=',', usecols=['gene.id', 'median'])
    h_s.rename(
        {'gene.id': 'gene_id', 'median': _SR_MED_COV}, axis=1, inplace=True
    )
    h_full = h_l.merge(h_s, on='gene_id', how='outer')
    h_full['sample'] = 'HX1'

    i_l = pd.read_table(i_lr, sep='\t', usecols=['gene_id', _LR_TX_READS])
    i_lvals = i_l.groupby('gene_id')[_LR_TX_READS].max().reset_index()
    i_s = pd.read_table(i_sr, sep=',', usecols=['gene.id', 'median'])
    i_s.rename(
        {'gene.id': 'gene_id', 'median': _SR_MED_COV}, axis=1, inplace=True
    )
    i_full = i_l.merge(i_s, on='gene_id', how='outer')
    i_full['sample'] = 'iPSC'
    plot_df = pd.concat([h_full, i_full], ignore_index=True)

    out_file = os.path.join(output_dir, 'gene_coverage_{}.pdf'.format(now))
    scatter_regression_and_size(
        plot_df, _LR_TX_READS, _SR_MED_COV, out_file
    )

    h_file = os.path.join(os.path.dirname(h_lr), 'target_genes_HX1.txt')
    select_target_genes(h_full, h_file)

    i_file = os.path.join(os.path.dirname(i_lr), 'target_genes_iPSC.txt')
    select_target_genes(i_full, i_file)
